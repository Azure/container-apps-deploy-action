name: 'Azure Container Apps Build and Deploy'
description: |
  'GitHub Action for building and deploying Azure Container Apps'
branding:
  icon: "login.svg"
  color: "blue"
inputs:
  appSourcePath:
    description: 'Absolute path on the GitHub runner of the source application code to be built.'
    required: false
  acrName:
    description: 'The name of the Azure Container Registry that the runnable application image will be pushed to.'
    required: false
  acrUsername:
    description: |
      'The username used to authenticate push requests to the provided Azure Container Registry. If not provided, an
      access token will be generated via "az acr login" and provided to "docker login" to authenticate the requests.'
    required: false
  acrPassword:
    description: |
      'The password used to authenticate push requests to the provided Azure Container Registry. If not provided, an
      access token will be generated via "az acr login" and provided to "docker login" to authenticate the requests.'
    required: false
  azureCredentials:
    description: |
      'Azure credentials used by the `azure/login` action to authenticate Azure CLI requests if the user has not
      previously authenticated in the workflow calling this action.'
    required: false
  imageToBuild:
    description: |
      'The custom name of the image that is to be built, pushed to ACR and deployed to the Container App by this action.
      Note: this image name should include the ACR server; e.g., <acr-name>.azurecr.io/<repo>:<tag>. If this argument is
      not provided, a default image name will be constructed in the form of
      <acr-name>.azurecr.io/github-action/container-app:<github-run-id>.<github-run-attempt>.'
    required: false
  imageToDeploy:
    description: |
      'The custom name of an image that has already been pushed to ACR and will be deployed to the Container App by this
      action. Note: this image name should include the ACR server; e.g., <acr-name>.azurecr.io/<repo>:<tag>. If this
      argument is not provided, the value provided (or determined) for the "imageToBuild" argument will be used.'
    required: false
  dockerfilePath:
    description: |
      'Relative path to the Dockerfile in the provided application source that should be used to build the image that is
      then pushed to ACR and deployed to the Container App. If not provided, this action will check if there is a file
      named "Dockerfile" in the provided application source and use that to build the image. Otherwise, the Oryx++
      Builder will be used to create the image.'
    required: false
  containerAppName:
    description: |
      'The name of the Azure Container App that will be created or updated. If not provided, this value will be
      gh-action-app-<github-run-id>-<github-run-attempt>.'
    required: false
    default: 'gh-action-app-${{ github.run_id }}-${{ github.run_attempt }}'
  resourceGroup:
    description: |
      'The resource group that the Azure Container App will be created in. If not provided, this value will be
      <container-app-name>-rg'
    required: false
  containerAppEnvironment:
    description: |
      'The name of the Azure Container App environment to use with the application. If not provided, an existing
      environment in the resource group of the Container App will be used, otherwise, an environment will be created in
      the format <container-app-name>-env'
    required: false
  runtimeStack:
    description: |
      'The platform version stack that the application runs in when deployed to the Azure Container App. This should
      be provided in the format <platform>:<version>. If not provided, this value is determined by Oryx based on the
      contents of the provided application. Please view the following document for more information on the supported
      runtime stacks for Oryx:
      https://github.com/microsoft/Oryx/blob/main/doc/supportedRuntimeVersions.md'
    required: false
  targetPort:
    description: |
      'The designated port for the application to run on. If not provided, this value is 80 for Python and 8080 for all
      other supported platforms.'
    required: false
  location:
    description: |
      'The location that the Container App (and other created resources) will be deployed to. To view locations suitable
      for creating the Container App in, please run the following: az provider show -n Microsoft.App --query "resourceTypes[?resourceType=='containerApps'].locations"'
    required: false
  environmentVariables:
    description: |
      'A list of environment variable(s) for the container. Space-separated values in 'key=value' format. Empty string
      to clear existing values. Prefix value with 'secretref:' to reference a secret.'
    required: false
  disableTelemetry:
    description: |
      'If set to "true", no telemetry will be collected by this GitHub Action. If set to "false", or if this argument is
      not provided, telemetry will be sent to Microsoft about the Container App build and deploy scenario targeted by
      this GitHub Action.'
    required: false
    default: false

runs:
  using: "composite"
  steps:
    - name: Start timer to track action execution length, in milliseconds
      if: ${{ always() && inputs.disableTelemetry == 'false' }}
      shell: bash
      run: |
        CA_GH_ACTION_START_MILLISECONDS=$(date +%s%N | cut -b1-13)
        echo "CA_GH_ACTION_START_MILLISECONDS=${CA_GH_ACTION_START_MILLISECONDS}" >> $GITHUB_ENV
        CA_GH_ACTION_RESULT_ARG="--property 'result=failed'"
        echo "CA_GH_ACTION_RESULT_ARG=${CA_GH_ACTION_RESULT_ARG}" >> $GITHUB_ENV

    - name: Check for ACR name provided with application source path
      if: ${{ inputs.appSourcePath != '' && inputs.acrName == '' }}
      shell: bash
      run: |
        echo "The 'acrName' argument must also be provided if the 'appSourcePath' argument is provided."
        exit 1

    - name: Check for application source path or previously built image when ACR name is provided
      if: ${{ inputs.appSourcePath == '' && inputs.acrName == '' && inputs.imageToDeploy == '' }}
      shell: bash
      run: |
        echo "The argument 'imageToDeploy' must be provided if neither 'appSourcePath' nor 'acrName' are provided."
        exit 1

    - name: Set Azure CLI to dynamically install missing extensions
      shell: bash
      run: az config set extension.use_dynamic_install=yes_without_prompt

    - name: Log in to Azure
      if: ${{ inputs.azureCredentials != '' }}
      uses: azure/login@v1
      with:
        creds: ${{ inputs.azureCredentials }}

    - name: Log in to Azure Container Registry
      uses: docker/login-action@v2.0.0
      if: ${{ inputs.acrName != '' && inputs.acrUsername != '' && inputs.acrPassword != '' }}
      with:
        registry: ${{ inputs.acrName }}.azurecr.io
        username: ${{ inputs.acrUsername }}
        password: ${{ inputs.acrPassword }}

    - name: Export Azure Container Registry information to environment variable for Azure CLI command
      if: ${{ inputs.acrName != '' && inputs.acrUsername != '' && inputs.acrPassword != '' }}
      shell: bash
      run: |
        CA_GH_ACTION_ACR_LOGIN_ARG="--registry-server ${{ inputs.acrName }}.azurecr.io --registry-username ${{ inputs.acrUsername }} --registry-password ${{ inputs.acrPassword }}"
        echo "CA_GH_ACTION_ACR_LOGIN_ARG=${CA_GH_ACTION_ACR_LOGIN_ARG}" >> $GITHUB_ENV

    - name: Get access token to log in to Azure Container Registry
      if: ${{ inputs.acrName != '' && (inputs.acrUsername == '' || inputs.acrPassword == '') }}
      shell: bash
      run: |
        CA_GH_ACTION_ACR_ACCESS_TOKEN=$(az acr login --name ${{ inputs.acrName }} --output json --expose-token | jq -r '.accessToken')
        echo "CA_GH_ACTION_ACR_ACCESS_TOKEN=${CA_GH_ACTION_ACR_ACCESS_TOKEN}" >> $GITHUB_ENV
        docker login ${{ inputs.acrName }}.azurecr.io -u 00000000-0000-0000-0000-000000000000 -p $CA_GH_ACTION_ACR_ACCESS_TOKEN

    - name: Export Dockerfile path to environment variable
      if: ${{ inputs.appSourcePath != '' && inputs.dockerfilePath != '' }}
      shell: bash
      run: |
        CA_GH_ACTION_DOCKERFILE_PATH="${{ inputs.appSourcePath }}/${{ inputs.dockerfilePath }}"
        echo "CA_GH_ACTION_DOCKERFILE_PATH=${CA_GH_ACTION_DOCKERFILE_PATH}" >> $GITHUB_ENV

    - name: Check for existing Dockerfile in application source
      if: ${{ inputs.appSourcePath != '' && inputs.dockerfilePath == '' }}
      shell: bash
      run: |
        dockerfilePath=${{ inputs.appSourcePath }}/Dockerfile
        if [ -f "$dockerfilePath" ]; then echo "CA_GH_ACTION_DOCKERFILE_PATH=${dockerfilePath}" >> $GITHUB_ENV; fi

    - name: Export name of image to build to environment variable
      if: ${{ inputs.imageToBuild != '' }}
      shell: bash
      run: |
        CA_GH_ACTION_IMAGE_TO_BUILD="${{ inputs.imageToBuild }}"
        echo "CA_GH_ACTION_IMAGE_TO_BUILD=${CA_GH_ACTION_IMAGE_TO_BUILD}" >> $GITHUB_ENV

    - name: Determine name of image to build if not provided
      if: ${{ inputs.acrName != '' && inputs.imageToBuild == '' }}
      shell: bash
      run: |
        CA_GH_ACTION_IMAGE_TO_BUILD="${{ inputs.acrName }}.azurecr.io/github-action/container-app:${{ github.run_id }}.${{ github.run_attempt }}"
        echo "CA_GH_ACTION_IMAGE_TO_BUILD=${CA_GH_ACTION_IMAGE_TO_BUILD}" >> $GITHUB_ENV

    - name: Export name of image to deploy to environment variable
      if: ${{ inputs.imageToDeploy != '' }}
      shell: bash
      run: |
        CA_GH_ACTION_IMAGE_TO_DEPLOY="${{ inputs.imageToDeploy }}"
        echo "CA_GH_ACTION_IMAGE_TO_DEPLOY=${CA_GH_ACTION_IMAGE_TO_DEPLOY}" >> $GITHUB_ENV

    - name: Update name of image to deploy if not provided
      if: ${{ inputs.imageToDeploy == '' }}
      shell: bash
      run: |
        CA_GH_ACTION_IMAGE_TO_DEPLOY="${{ env.CA_GH_ACTION_IMAGE_TO_BUILD }}"
        echo "CA_GH_ACTION_IMAGE_TO_DEPLOY=${CA_GH_ACTION_IMAGE_TO_DEPLOY}" >> $GITHUB_ENV

    - name: Export resource group to environment variable
      if: ${{ inputs.resourceGroup != '' }}
      shell: bash
      run: |
        CA_GH_ACTION_RESOURCE_GROUP="${{ inputs.resourceGroup }}"
        echo "CA_GH_ACTION_RESOURCE_GROUP=${CA_GH_ACTION_RESOURCE_GROUP}" >> $GITHUB_ENV

    - name: Determine resource group if not provided
      if: ${{ inputs.resourceGroup == '' }}
      shell: bash
      run: |
        CA_GH_ACTION_RESOURCE_GROUP="${{ inputs.containerAppName }}-rg"
        echo "CA_GH_ACTION_RESOURCE_GROUP=${CA_GH_ACTION_RESOURCE_GROUP}" >> $GITHUB_ENV

    - name: Export environment to environment variable
      if: ${{ inputs.containerAppEnvironment != '' }}
      shell: bash
      run: |
        CA_GH_ACTION_CONTAINER_APP_ENVIRONMENT_ARG="--environment ${{ inputs.containerAppEnvironment }}"
        echo "CA_GH_ACTION_CONTAINER_APP_ENVIRONMENT_ARG=${CA_GH_ACTION_CONTAINER_APP_ENVIRONMENT_ARG}" >> $GITHUB_ENV

    - name: Export runtime stack to environment variable
      if: ${{ inputs.runtimeStack != '' }}
      shell: bash
      run: |
        CA_GH_ACTION_RUNTIME_STACK="${{ inputs.runtimeStack }}"
        echo "CA_GH_ACTION_RUNTIME_STACK=${CA_GH_ACTION_RUNTIME_STACK}" >> $GITHUB_ENV

    - name: Determine runtime stack if not provided
      if: ${{ inputs.appSourcePath != '' && inputs.runtimeStack == '' }}
      shell: bash
      run: |
        docker run --rm -v ${{ inputs.appSourcePath }}:/app mcr.microsoft.com/oryx/cli:builder-debian-buster-20230208.1 /bin/bash -c "oryx dockerfile /app | head -n 1 | sed 's/ARG RUNTIME=//' >> /app/oryx-runtime.txt"
        CA_GH_ACTION_RUNTIME_STACK=$(head -n 1 ${{ inputs.appSourcePath }}/oryx-runtime.txt)
        echo "CA_GH_ACTION_RUNTIME_STACK=${CA_GH_ACTION_RUNTIME_STACK}" >> $GITHUB_ENV
        rm ${{ inputs.appSourcePath }}/oryx-runtime.txt

    - name: Export target port to environment variable
      if: ${{ inputs.targetPort != '' }}
      shell: bash
      run: |
        CA_GH_ACTION_TARGET_PORT="${{ inputs.targetPort }}"
        echo "CA_GH_ACTION_TARGET_PORT=${CA_GH_ACTION_TARGET_PORT}" >> $GITHUB_ENV

    - name: Determine default target port if not provided and no Dockerfile provided/found
      if: ${{ inputs.targetPort == '' && env.CA_GH_ACTION_DOCKERFILE_PATH == '' && inputs.appSourcePath != '' }}
      shell: bash
      run: |
        if [[ "${{ env.CA_GH_ACTION_RUNTIME_STACK }}" == "python:"* ]]; then echo "CA_GH_ACTION_TARGET_PORT=80" >> $GITHUB_ENV; else echo "CA_GH_ACTION_TARGET_PORT=8080" >> $GITHUB_ENV; fi

    - name: Export target port information to environment variable for Azure CLI command
      if: ${{ env.CA_GH_ACTION_TARGET_PORT != '' }}
      shell: bash
      run: |
        CA_GH_ACTION_TARGET_PORT_ARG="--target-port ${{ env.CA_GH_ACTION_TARGET_PORT }}"
        echo "CA_GH_ACTION_TARGET_PORT_ARG=${CA_GH_ACTION_TARGET_PORT_ARG}" >> $GITHUB_ENV

    - name: Export location argument to environment variable
      if: ${{ inputs.location != '' }}
      shell: bash
      run: |
        CA_GH_ACTION_CONTAINER_APP_LOCATION_ARG="--location ${{ inputs.location }}"
        echo "CA_GH_ACTION_CONTAINER_APP_LOCATION_ARG=${CA_GH_ACTION_CONTAINER_APP_LOCATION_ARG}" >> $GITHUB_ENV

    - name: Export environment variables argument to environment variable
      if: ${{ inputs.environmentVariables != '' }}
      shell: bash
      run: |
        CA_GH_ACTION_CONTAINER_APP_ENVIRONMENT_VARIABLES_ARG="--env-vars ${{ inputs.environmentVariables }}"
        echo "CA_GH_ACTION_CONTAINER_APP_ENVIRONMENT_VARIABLES_ARG=${CA_GH_ACTION_CONTAINER_APP_ENVIRONMENT_VARIABLES_ARG}" >> $GITHUB_ENV

    - name: Install pack CLI on non-Windows runner
      if: ${{ runner.os != 'Windows' && inputs.appSourcePath != '' && env.CA_GH_ACTION_DOCKERFILE_PATH == '' }}
      shell: bash
      run: (curl -sSL "https://github.com/buildpacks/pack/releases/download/v0.27.0/pack-v0.27.0-${{ runner.os }}.tgz" | sudo tar -C /usr/local/bin/ --no-same-owner -xzv pack)

    - name: Install pack CLI on Windows runner
      if: ${{ runner.os == 'Windows' && inputs.appSourcePath != '' && env.CA_GH_ACTION_DOCKERFILE_PATH == '' }}
      shell: bash
      run: |
          mkdir -p $PWD/pack && cd $PWD/pack
          curl -sSL "https://github.com/buildpacks/pack/releases/download/v0.27.0/pack-v0.27.0-windows.zip" -o "pack-windows.zip"
          7z x pack-windows.zip > /dev/null 2>&1
          rm pack-windows.zip && echo "$PWD" >> $GITHUB_PATH

    - name: Set Oryx++ Builder as default builder
      if: ${{ inputs.appSourcePath != '' && env.CA_GH_ACTION_DOCKERFILE_PATH == '' }}
      shell: bash
      run: pack config default-builder mcr.microsoft.com/oryx/builder:20230208.1

    - name: Set telemetry for Oryx++ Builder
      if: ${{ inputs.appSourcePath != '' && env.CA_GH_ACTION_DOCKERFILE_PATH == '' && inputs.disableTelemetry == 'false' }}
      shell: bash
      run: |
        CA_GH_ACTION_ORYX_BUILDER_TELEMETRY_ARG='--env "CALLER_ID=github-actions-v0"'
        echo "CA_GH_ACTION_ORYX_BUILDER_TELEMETRY_ARG=${CA_GH_ACTION_ORYX_BUILDER_TELEMETRY_ARG}" >> $GITHUB_ENV

    - name: Disable telemetry for Oryx++ Builder
      if: ${{ inputs.appSourcePath != '' && env.CA_GH_ACTION_DOCKERFILE_PATH == '' && inputs.disableTelemetry == 'true' }}
      shell: bash
      run: |
        CA_GH_ACTION_ORYX_BUILDER_TELEMETRY_ARG='--env "ORYX_DISABLE_TELEMETRY=true"'
        echo "CA_GH_ACTION_ORYX_BUILDER_TELEMETRY_ARG=${CA_GH_ACTION_ORYX_BUILDER_TELEMETRY_ARG}" >> $GITHUB_ENV

    - name: Create runnable application image using Oryx++ Builder
      if: ${{ inputs.appSourcePath != '' && env.CA_GH_ACTION_DOCKERFILE_PATH == '' }}
      shell: bash
      run: pack build ${{ env.CA_GH_ACTION_IMAGE_TO_DEPLOY }} --path ${{ inputs.appSourcePath }} --builder mcr.microsoft.com/oryx/builder:20230208.1 --run-image mcr.microsoft.com/oryx/${{ env.CA_GH_ACTION_RUNTIME_STACK }} ${{ env.CA_GH_ACTION_ORYX_BUILDER_TELEMETRY_ARG }}

    - name: Create runnable application image using provided Dockerfile
      if: ${{ inputs.appSourcePath != '' && env.CA_GH_ACTION_DOCKERFILE_PATH != '' }}
      shell: bash
      run: docker build --tag ${{ env.CA_GH_ACTION_IMAGE_TO_DEPLOY }} --file ${{ env.CA_GH_ACTION_DOCKERFILE_PATH }} ${{ inputs.appSourcePath }}

    - name: Push image to Azure Container Registry
      if: ${{ inputs.appSourcePath != '' }}
      shell: bash
      run: docker push ${{ env.CA_GH_ACTION_IMAGE_TO_DEPLOY }}

    - name: Create or update Azure Container App
      shell: bash
      run: |
        az containerapp up --name ${{ inputs.containerAppName }} --resource-group ${{ env.CA_GH_ACTION_RESOURCE_GROUP }} --image ${{ env.CA_GH_ACTION_IMAGE_TO_DEPLOY }} ${{ env.CA_GH_ACTION_TARGET_PORT_ARG }} ${{ env.CA_GH_ACTION_CONTAINER_APP_ENVIRONMENT_ARG }} ${{ env.CA_GH_ACTION_ACR_LOGIN_ARG }} ${{ env.CA_GH_ACTION_CONTAINER_APP_LOCATION_ARG }} ${{ env.CA_GH_ACTION_CONTAINER_APP_ENVIRONMENT_VARIABLES_ARG }}

    - name: Mark action as 'succeeded' for telemetry
      if: ${{ inputs.disableTelemetry == 'false' }}
      shell: bash
      run: |
        CA_GH_ACTION_RESULT_ARG="--property 'result=succeeded'"
        echo "CA_GH_ACTION_RESULT_ARG=${CA_GH_ACTION_RESULT_ARG}" >> $GITHUB_ENV

    - name: End timer that's tracking action execution length, in milliseconds
      if: ${{ always() && inputs.disableTelemetry == 'false' }}
      shell: bash
      run: |
        CA_GH_ACTION_END_MILLISECONDS=$(date +%s%N | cut -b1-13)
        CA_GH_ACTION_START_MILLISECONDS=${{ env.CA_GH_ACTION_START_MILLISECONDS }}
        CA_GH_ACTION_LENGTH_MILLISECONDS_ARG="--processing-time '$((CA_GH_ACTION_END_MILLISECONDS-CA_GH_ACTION_START_MILLISECONDS))'"
        echo "CA_GH_ACTION_LENGTH_MILLISECONDS_ARG=${CA_GH_ACTION_LENGTH_MILLISECONDS_ARG}" >> $GITHUB_ENV

    - name: Set telemetry for previously built image scenario
      if: ${{ inputs.disableTelemetry == 'false' && inputs.appSourcePath == '' }}
      shell: bash
      run: |
        CA_GH_ACTION_SCENARIO_ARG="--property 'scenario=used-image'"
        echo "CA_GH_ACTION_SCENARIO_ARG=${CA_GH_ACTION_SCENARIO_ARG}" >> $GITHUB_ENV

    - name: Set telemetry for built Dockerfile scenario
      if: ${{ inputs.disableTelemetry == 'false' && env.CA_GH_ACTION_DOCKERFILE_PATH != '' }}
      shell: bash
      run: |
        CA_GH_ACTION_SCENARIO_ARG="--property 'scenario=used-dockerfile'"
        echo "CA_GH_ACTION_SCENARIO_ARG=${CA_GH_ACTION_SCENARIO_ARG}" >> $GITHUB_ENV

    - name: Set telemetry for no Dockerfile scenario
      if: ${{ inputs.disableTelemetry == 'false' && inputs.appSourcePath != '' && env.CA_GH_ACTION_DOCKERFILE_PATH == '' }}
      shell: bash
      run: |
        CA_GH_ACTION_SCENARIO_ARG="--property 'scenario=used-builder'"
        echo "CA_GH_ACTION_SCENARIO_ARG=${CA_GH_ACTION_SCENARIO_ARG}" >> $GITHUB_ENV

    - name: Log telemetry for action
      if: ${{ always() && inputs.disableTelemetry == 'false' }}
      shell: bash
      run: |
        docker run --rm mcr.microsoft.com/oryx/cli:debian-buster-20230207.2  /bin/bash -c "oryx telemetry --event-name 'ContainerAppsGitHubAction' ${{ env.CA_GH_ACTION_LENGTH_MILLISECONDS_ARG }} ${{ env.CA_GH_ACTION_SCENARIO_ARG }} ${{ env.CA_GH_ACTION_RESULT_ARG }}"
